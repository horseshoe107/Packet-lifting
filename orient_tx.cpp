#include "stdafx.h"
#include "base.h"
#include "dwtnode.h"
double splines[] = {0, 0, 0, 1, 0, 0, 0,
-0.0057314933, 0.0213902240,-0.0798294029, 0.9674625206, 0.1198302579,-0.0315853847, 0.0084632783,
-0.0088233996, 0.0329293754,-0.1228941022, 0.8796881878, 0.2687588056,-0.0678352739, 0.0181764069,
-0.0097770136, 0.0364883116,-0.1361762329, 0.7514540266, 0.4325511590,-0.1018238761, 0.0272836254,
-0.0090991941, 0.0339586548,-0.1267354249, 0.5973263672, 0.5973263672,-0.1267354249, 0.0339586548};
int splines_extent = 3;
double inbandker_lut[] = {0, 0, 0, 0, 1, 0, 0, 0, 0,
 0.0030729240, 0.0385131836, -0.0342173310, -0.1316833496, 0.9902517977,
 0.1479797363, 0.0455522287, -0.0548095703, -0.0046596194,
 0.0047359702, 0.0620117188, -0.0580117218, -0.2448730469, 0.9626820521,
 0.3049316406, 0.1013260908, -0.1220703125, -0.0107323913,
 0.0052551140, 0.0730590820, -0.0728175166, -0.3386535645, 0.9198061712,
 0.4622497559, 0.1657145936, -0.1966552734, -0.0179583621,
 0.0048969229, 0.0742187500, -0.0800785534, -0.4121093750, 0.8641292311,
 0.6113281250, 0.2371323797, -0.2734375000, -0.0260799804,
 0, 0, 0, 0, 1, 0, 0, 0, 0,
 0, 0.0086022059, 0.0770099100, -0.0343980323, 0.9454766603,
 0.0387422175, -0.1087414101, -0.0129463910, 0.0001220442,
 0, 0.0132613106, 0.1239296477, -0.0638843133, 0.7991998543,
 0.0798947339, -0.2371252315, -0.0292717311, 0.0009758240,
 0, 0.0147199782, 0.1458988620, -0.0882328570, 0.5871301738,
 0.1211820829, -0.3696835825, -0.0476692042, 0.0032909518,
 0, 0.0137208727, 0.1480903932, -0.1072176771, 0.3351519424,
 0.1603287985, -0.4910365668, -0.0668319941, 0.0077942312,
 0.03125, -0.0625, -0.5, 0.5625, 0.9375, 0.5625, -0.5, -0.0625, 0.03125,
 0.0209350586, -0.0533622894, -0.4656982422, 0.4787570787, 0.9125976563,
 0.6457116397, -0.5118408203, -0.0711064290, 0.0440063477,
 0.0131835937, -0.0441128890, -0.4130859375, 0.3959005589, 0.8437500000,
 0.7261583390, -0.5009765625, -0.0779460089, 0.0571289062,
 0.0076293945, -0.0349805156, -0.3472900391, 0.3152617453, 0.7397460938,
 0.8012790007, -0.4681396484, -0.0815602304, 0.0680541992,
 0.0039062500, -0.0262083205, -0.2734375000, 0.2382993131, 0.6093750000,
 0.8683816290, -0.4140625000, -0.0804726216, 0.0742187500,
 0, 0.0625, -0.125, -0.5625, 0.25, -0.5625, -0.125, 0.0625, 0,
-0.0023049541, 0.0418701172, -0.1158441038, -0.6383056641, 0.2433654469,
-0.4056396484, -0.1286199467, 0.0880126953, 0.0034035577,
-0.0035533575, 0.0263671875, -0.1022262600, -0.6416015625, 0.2250208179,
-0.1865234375, -0.1265611989, 0.1142578125, 0.0073199985,
-0.0039442063, 0.0152587891, -0.0854532847, -0.5877685547, 0.1973046586,
0.0692138672, -0.1189138257, 0.1361083984, 0.0110066581,
-0.0036764968, 0.0078125000, -0.0668319941, -0.4921875000, 0.1625555144,
0.3359375000, -0.1057678963, 0.1484375000, 0.0137208727};
int inbandker_extent = 4;
double packetker_lut[] =
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-0.0011786749, 0, 0.0022794374, -0.0048141479, 0.0187405642,
0.0260925293, -0.0188995674, -0.0225372314, -0.0549830661, -0.0453186035,
0.9967534111, 0.0595092773, 0.0599888926, 0.0123596191, 0.0229216851,
-0.0321502686, -0.0241527238, 0.0068664551, -0.0030549663, -0.0000076294, 0.0015850078,
-0.0019820109, 0, 0.0038439714, -0.0077514648, 0.0325028222,
0.0461425781, -0.0340513014, -0.0528564453, -0.1052869663, -0.0769042969,
0.9874735497, 0.1289062500, 0.1244029253, 0.0153808594, 0.0495157721,
-0.0682373047, -0.0531514317, 0.0153808594, -0.0067819918, -0.0000610352, 0.0035146615,
-0.0024641727, 0, 0.0047951915, -0.0091323853, 0.0419706344,
0.0606994629, -0.0458850338, -0.0877532959, -0.1514651983, -0.0964050293,
0.9728502079, 0.2026977539, 0.1924345745, 0.0107116699, 0.0792761690,
-0.1056060791, -0.0861799413, 0.0249938965, -0.0110365346, -0.0002059937, 0.0057041034,
-0.0026793247, 0, 0.0052346529, -0.0092773438, 0.0478278612,
0.0703125000, -0.0548302603, -0.1240234375, -0.1940712596, -0.1054687500,
0.9535733590, 0.2753906250, 0.2632763169, 0, 0.1116962184,
-0.1416015625, -0.1224220700, 0.0351562500, -0.0156739700, -0.0004882812, 0.0080684762,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, -0.0001719168, 0, 0.0003547396, 0,
 0.0051622115, 0, -0.0082087201, 0.0770263672, -0.0720253262,
 0.9456787109, 0.0153095037, -0.1087646484, -0.0298377550, 0.0001220703,
 -0.0074179147, 0, 0.0035968071, 0, -0.0000376084, 0,
 0, -0.0002650299, 0, 0.0005468727, 0,
 0.0105972784, 0, -0.0179329525, 0.1240234375, -0.1347700562,
 0.7998046875, 0.0341346278, -0.2373046875, -0.0672757370, 0.0009765625,
 -0.0166676639, 0, 0.0080926314, 0, -0.0000808841, 0,
 0, -0.0002941817, 0, 0.0006070255, 0,
 0.0159893501, 0, -0.0283583383, 0.1461181641, -0.1876074771,
 0.5880126953, 0.0547626332, -0.3702392578, -0.1092736176, 0.0032958984,
 -0.0268896997, 0, 0.0130821705, 0, -0.0001216208, 0,
 0, -0.0002742144, 0, 0.0005658242, 0,
 0.0210225757, 0, -0.0386705183, 0.1484375000, -0.2299108763,
 0.3359375000, 0.0754807803, -0.4921875000, -0.1527910682, 0.0078125000,
 -0.0372244741, 0, 0.0181601219, 0, -0.0001516121, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-0.0000272978, 0, -0.0022477391, 0, 0.0043326716,
-0.0096282959, 0.0250459934, 0.0521850586, -0.0142775234, -0.1124725342,
0.9839808209, 0.1206054688, 0.0157077596, -0.0644073486, -0.0322418362,
0.0137329102, -0.0057759186, -0.0000152588, 0.0030081616, 0, 0.0000403086,
-0.0000420827, 0, -0.0037950442, 0, 0.0073391029,
-0.0155029297, 0.0435261905, 0.0922851563, -0.0272216503, -0.2142333984,
0.9386596895, 0.2441406250, 0.0326833530, -0.1373291016, -0.0709878302,
0.0307617187, -0.0128454141, -0.0001220703, 0.0066812250, 0, 0.0000866913,
-0.0000467116, 0, -0.0047407812, 0, 0.0092029699,
-0.0182647705, 0.0564010707, 0.1213989258, -0.0389940310, -0.3033599854,
0.8681412147, 0.3647460938, 0.0506995672, -0.2140960693, -0.1152158640,
0.0499877930, -0.0209921473, -0.0004119873, 0.0108847921, 0, 0.0001303527,
-0.0000435410, 0, -0.0051838159, 0, 0.0101079486,
-0.0185546875, 0.0646311136, 0.1406250000, -0.0497563158, -0.3779296875,
0.7765300054, 0.4765625000, 0.0695291895, -0.2900390625, -0.1639038196,
0.0703125000, -0.0299997787, -0.0009765625, 0.0154844648, 0, 0.0001624974,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0.0000254692, 0, -0.0023944921, 0,
 0.0049408848, 0, 0.0199779524, 0.0770263672, -0.0104905482,
 0.9456787109, 0.0800247204, -0.1087646484, 0.0060480123, 0.0001220703,
 -0.0045860582, 0, -0.0005238181, 0, 0.0002538570, 0,
 0, 0.0000392637, 0, -0.0036913907, 0,
 0.0076169541, 0, 0.0309595389, 0.1240234375, -0.0164964233,
 0.7998046875, 0.1641496754, -0.2373046875, 0.0099667759, 0.0009765625,
 -0.0083428781, 0, -0.0011265704, 0, 0.0005459678, 0,
 0, 0.0000435825, 0, -0.0040974224, 0,
 0.0084547751, 0, 0.0345889493, 0.1461181641, -0.0187613121,
 0.5880126953, 0.2478212163, -0.3702392578, 0.0119569133, 0.0032958984,
 -0.0110299276, 0, -0.0016939587, 0, 0.0008209402, 0,
 0, 0.0000406244, 0, -0.0038193135, 0,
 0.0078809147, 0, 0.0325103732, 0.1484375000, -0.0180289015,
 0.3359375000, 0.3264856943, -0.4921875000, 0.0122190471, 0.0078125000,
 -0.0124066747, 0, -0.0021116847, 0, 0.0010233820, 0,
0, 0.0039062500, -0.0039062500, 0.0488281250, 0.0703125000,
-0.0703125000, -0.2187500000, -0.3398437500, -0.0703125000, 0.8437500000,
0.4453125000, 0.5566406250, -0.0703125000, 0.2578125000, -0.2187500000,
-0.2832031250, 0.0703125000, -0.0351562500, -0.0039062500, 0.0175781250, 0,
 0, 0.0032958328, -0.0026168823, 0.0467845430, 0.0634460449,
 -0.0711953239, -0.2147979736, -0.3726577403, -0.0519104004, 0.8114820710,
 0.4319458008, 0.6295546911, -0.0865173340, 0.2959797962, -0.2090301514,
 -0.3232493231, 0.0749816895, -0.0395623760, -0.0055007935, 0.0195678293, 0,
 0, 0.0026945762, -0.0016479492, 0.0445988025, 0.0549316406,
 -0.0714066284, -0.1988525391, -0.4037213783, -0.0329589844, 0.7781462881,
 0.3955078125, 0.6992423323, -0.0988769531, 0.3342119239, -0.1878662109,
 -0.3614843171, 0.0769042969, -0.0436461598, -0.0071411133, 0.0213645606, 0,
 0, 0.0021153912, -0.0009536743, 0.0423200279, 0.0453186035,
 -0.0710166666, -0.1735687256, -0.4320820603, -0.0151062012, 0.7438668591,
 0.3414916992, 0.7637015262, -0.1057434082, 0.3724617636, -0.1584625244,
 -0.3969641963, 0.0755310059, -0.0474273474, -0.0085067749, 0.0230247026, 0,
 0, 0.0015711477, -0.0004882812, 0.0399973437, 0.0351562500,
 -0.0700956530, -0.1416015625, -0.4567871826, 0, 0.7087657601,
 0.2753906250, 0.8209302502, -0.1054687500, 0.4106846712, -0.1240234375,
 -0.4287450501, 0.0703125000, -0.0509259259, -0.0092773438, 0.0246046388, 0,
 0, 0, 0, 0, 0.03125, 0, -0.0625, 0.0625, -0.28125, -0.5625,
 0.125, -0.5625, -0.28125, 0.0625, -0.0625, 0, 0.03125, 0, 0, 0, 0,
 0.0000460650, 0, -0.0000950522, 0, 0.0298714246,
 0, -0.0603097502, 0.0418701172, -0.2620575547, -0.6383056641,
 0.1210484612, -0.4056396484, -0.2873719989, 0.0880126953, -0.0607842334,
 0, 0.0308106673, 0, 0.0001403566, 0, -0.0000680208,
 0.0000710146, 0, -0.0001465341, 0, 0.0269600515,
 0, -0.0547940473, 0.0263671875, -0.2322233653, -0.6416015625,
 0.1103357956, -0.1865234375, -0.2804413542, 0.1142578125, -0.0556978249,
 0, 0.0287490851, 0, 0.0003018636, 0, -0.0001462916,
 0.0000788257, 0, -0.0001626520, 0, 0.0229211831,
 0, -0.0468124393, 0.0152587891, -0.1947877603, -0.5877685547,
 0.0945749292, 0.0692138672, -0.2610874950, 0.1361083984, -0.0480551335,
 0, 0.0253811043, 0, 0.0004538949, 0, -0.0002199703,
 0.0000734755, 0, -0.0001516121, 0, 0.0181601219,
 0, -0.0372244741, 0.0078125000, -0.1527910682, -0.4921875000,
 0.0754787882, 0.3359375000, -0.2299398505, 0.1484375000, -0.0386705183,
 0, 0.0210225757, 0, 0.0005658242, 0, -0.0002742144,
0, -0.0039062500, 0, 0.0078125000, -0.0078125000,
0.0703125000, 0.1406250000, -0.0859375000, -0.4921875000, 0.2812500000,
0.7187500000, 0.1484375000, -0.4921875000, -0.3828125000, 0.1406250000,
-0.0703125000, -0.0078125000, 0.0351562500, 0, 0, 0,
 0, -0.0033045495, 0, 0.0066527229, -0.0052337646,
 0.0695532647, 0.1268920898, -0.0940073657, -0.4662322998, 0.1455713217,
 0.7006835938, 0.1678816914, -0.4950714111, -0.4381528997, 0.1499633789,
 -0.0803766148, -0.0110015869, 0.0397397063, 0, -0.0001504338, 0,
 0, -0.0027080689, 0, 0.0054833892, -0.0032958984,
 0.0688783716, 0.1098632813, -0.1016390366, -0.4207763672, 0.0123899859,
 0.6503906250, 0.1864652691, -0.4757080078, -0.4899281433, 0.1538085937,
 -0.0899860853, -0.0142822266, 0.0440282405, 0, -0.0003235365, 0,
 0, -0.0021304011, 0, 0.0043354508, -0.0019073486,
 0.0682146027, 0.0906372070, -0.1085963169, -0.3604888916, -0.1152269746,
 0.5737304688, 0.2036544145, -0.4360198975, -0.5352237428, 0.1510620117,
 -0.0989070653, -0.0170135498, 0.0480028155, 0, -0.0004864831, 0,
 0, -0.0015851387, 0, 0.0032398594, -0.0009765625,
 0.0674887403, 0.0703125000, -0.1146430105, -0.2900390625, -0.2342125269,
 0.4765625000, 0.2189153087, -0.3779296875, -0.5711252103, 0.1406250000,
 -0.1069057090, -0.0185546875, 0.0516443940, 0, -0.0006064486, 0,
 0, 0, 0, 0, 0, 0, 0, 0.0625, 0, -0.5625, 0.5, -0.5625, 0, 0.0625, 0, 0, 0, 0, 0, 0, 0,
-0.0000068244, 0, 0.0006416022, 0, -0.0013239061,
0, -0.0062697822, 0.0418701172, 0.0046437713, -0.6383056641,
0.4868763805, -0.4056396484, -0.0052778157, 0.0880126953, 0.0084686242,
0, 0.0019549156, 0, -0.0009474072, 0, 0.0000100772,
-0.0000105207, 0, 0.0009891052, 0, -0.0020409567,
0, -0.0102671340, 0.0263671875, 0.0083621973, -0.6416015625,
0.4505404473, -0.1865234375, -0.0105360636, 0.1142578125, 0.0178060210,
0, 0.0042044179, 0, -0.0020375795, 0, 0.0000216728,
-0.0000116779, 0, 0.0010979010, 0, -0.0022654502,
0, -0.0122325875, 0.0152587891, 0.0109545547, -0.5877685547,
0.3955445888, 0.0692138672, -0.0150305541, 0.1361083984, 0.0263680005,
0, 0.0063219400, 0, -0.0030637904, 0, 0.0000325882,
-0.0000108853, 0, 0.0010233820, 0, -0.0021116847,
0, -0.0124066747, 0.0078125000, 0.0122201203, -0.4921875000,
0.3264411929, 0.3359375000, -0.0180170972, 0.1484375000, 0.0325103732,
0, 0.0078809147, 0, -0.0038193135, 0, 0.0000406244,
 0, 0, 0.03125, 0, -0.0625, 0, -0.5, 0, 0.5625, 0,
 0.9375, 0, 0.5625, 0, -0.5, 0, -0.0625, 0, 0.03125, 0, 0,
-0.0001819851, 0, 0.0294270499, -0.0048141479, -0.0599395041,
0.0260925293, -0.4924543535, -0.0225372314, 0.5248777605, -0.0453186035,
0.9292133794, 0.0595092773, 0.5998254570, 0.0123596191, -0.4994431538,
-0.0321502686, -0.0648580819, 0.0068664551, 0.0332570781, -0.0000076294, 0.0002763536,
-0.0002805518, 0, 0.0277494288, -0.0077514648, -0.0571721823,
0.0461425781, -0.4774340394, -0.0528564453, 0.4870200326, -0.0769042969,
0.9056881993, 0.1289062500, 0.6367531628, 0.0153808594, -0.4914203331,
-0.0682373047, -0.0669594397, 0.0153808594, 0.0354167444, -0.0000610352, 0.0006389784,
-0.0003114113, 0, 0.0261607529, -0.0091323853, -0.0541789454,
0.0606994629, -0.4558829680, -0.0877532959, 0.4489782444, -0.0964050293,
0.8689264821, 0.2026977539, 0.6731721758, 0.0107116699, -0.4768841414,
-0.1056060791, -0.0687350785, 0.0249938965, 0.0376798744, -0.0002059937, 0.0010750150,
-0.0002902748, 0, 0.0246046388, -0.0092773438, -0.0509407084,
0.0703125000, -0.4287450501, -0.1240234375, 0.4108038826, -0.1054687500,
0.8209302502, 0.2753906250, 0.7089714969, 0, -0.4567871826,
-0.1416015625, -0.0701160000, 0.0351562500, 0.0399973437, -0.0004882812, 0.0015716037,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0.0000254692, 0, -0.0023944921, 0,
 0.0049408848, 0, 0.0199779524, 0.0770263672, -0.0104905482,
 0.9456787109, 0.0800247204, -0.1087646484, 0.0060480123, 0.0001220703,
 -0.0045860582, 0, -0.0005238181, 0, 0.0002538570, 0,
 0, 0.0000392637, 0, -0.0036913907, 0,
 0.0076169541, 0, 0.0309595389, 0.1240234375, -0.0164964233,
 0.7998046875, 0.1641496754, -0.2373046875, 0.0099667759, 0.0009765625,
 -0.0083428781, 0, -0.0011265704, 0, 0.0005459678, 0,
 0, 0.0000435825, 0, -0.0040974224, 0,
 0.0084547751, 0, 0.0345889493, 0.1461181641, -0.0187613121,
 0.5880126953, 0.2478212163, -0.3702392578, 0.0119569133, 0.0032958984,
 -0.0110299276, 0, -0.0016939587, 0, 0.0008209402, 0,
 0, 0.0000406244, 0, -0.0038193135, 0,
 0.0078809147, 0, 0.0325103732, 0.1484375000, -0.0180289015,
 0.3359375000, 0.3264856943, -0.4921875000, 0.0122190471, 0.0078125000,
 -0.0124066747, 0, -0.0021116847, 0, 0.0010233820, 0,
0, 0, 0, 0, 0.0625, 0, 0.125, 0, 0.5625, 0, 0.25, 0, 0.5625, 0, 0.125, 0, 0.0625, 0, 0, 0, 0,
 0.0001842599, 0, -0.0003802087, 0, 0.0603807792,
 -0.0096282959, -0.1230291617, 0.0521850586, -0.5933199405, -0.1124725342,
 0.2477902974, 0.1206054688, -0.5087104077, -0.0644073486, -0.1249576123,
 0.0137329102, 0.0642064143, -0.0000152588, 0.0005766853, 0, -0.0002797125,
 0.0002840582, 0, -0.0005861364, 0, 0.0578524131,
 -0.0155029297, -0.1192006032, 0.0922851563, -0.6030877971, -0.2142333984,
 0.2415170689, 0.2441406250, -0.4340212762, -0.1373291016, -0.1230598541,
 0.0307617187, 0.0655578639, -0.0001220703, 0.0013295248, 0, -0.0006462017,
 0.0003153030, 0, -0.0006506080, 0, 0.0549339390,
 -0.0182647705, -0.1137481702, 0.1213989258, -0.5947180577, -0.3033599854,
 0.2317141331, 0.3647460938, -0.3414996384, -0.2140960693, -0.1195429216,
 0.0499877930, 0.0666275666, -0.0004119873, 0.0022275668, 0, -0.0010858747,
 0.0002939021, 0, -0.0006064486, 0, 0.0516443940,
 -0.0185546875, -0.1069057090, 0.1406250000, -0.5711252103, -0.3779296875,
 0.2189153087, 0.4765625000, -0.2342125269, -0.2900390625, -0.1146430105,
 0.0703125000, 0.0674887403, -0.0009765625, 0.0032398594, 0, -0.0015851387,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, -0.0001719168, 0, 0.0003547396, 0,
 0.0051622115, 0, -0.0082087201, 0.0770263672, -0.0720253262,
 0.9456787109, 0.0153095037, -0.1087646484, -0.0298377550, 0.0001220703,
 -0.0074179147, 0, 0.0035968071, 0, -0.0000376084, 0,
 0, -0.0002650299, 0, 0.0005468727, 0,
 0.0105972784, 0, -0.0179329525, 0.1240234375, -0.1347700562,
 0.7998046875, 0.0341346278, -0.2373046875, -0.0672757370, 0.0009765625,
 -0.0166676639, 0, 0.0080926314, 0, -0.0000808841, 0,
 0, -0.0002941817, 0, 0.0006070255, 0,
 0.0159893501, 0, -0.0283583383, 0.1461181641, -0.1876074771,
 0.5880126953, 0.0547626332, -0.3702392578, -0.1092736176, 0.0032958984,
 -0.0268896997, 0, 0.0130821705, 0, -0.0001216208, 0,
 0, -0.0002742144, 0, 0.0005658242, 0, 
 0.0210225757, 0, -0.0386705183, 0.1484375000, -0.2299108763,
 0.3359375000, 0.0754807803, -0.4921875000, -0.1527910682, 0.0078125000,
 -0.0372244741, 0, 0.0181601219, 0, -0.0001516121, 0,
0, 0.0175781250, -0.0039062500, -0.0351562500, 0.0703125000,
-0.2832031250, -0.2187500000, 0.2578125000, -0.0703125000, 0.5566406250,
0.4453125000, 0.8437500000, -0.0703125000, -0.3398437500, -0.2187500000,
-0.0703125000, 0.0703125000, 0.0488281250, -0.0039062500, 0.0039062500, 0,
 0, 0.0153626041, -0.0026168823, -0.0304357159, 0.0634460449,
 -0.2422683453, -0.2147979736, 0.2198362201, -0.0519104004, 0.4823118840,
 0.4319458008, 0.8747294685, -0.0865173340, -0.3059807775, -0.2090301514,
 -0.0686280713, 0.0749816895, 0.0505746347, -0.0055007935, 0.0044980987, 0,
 0, 0.0129825840, -0.0016479492, -0.0255184687, 0.0549316406,
 -0.2012824545, -0.1988525391, 0.1824849038, -0.0329589844, 0.4076191283,
 0.3955078125, 0.9038215130, -0.0988769531, -0.2707652587, -0.1878662109,
 -0.0657724726, 0.0769042969, 0.0514460009, -0.0071411133, 0.0049845245, 0,
 0, 0.0105229222, -0.0009536743, -0.0205495652, 0.0453186035,
 -0.1610616352, -0.1735687256, 0.1462685358, -0.0151062012, 0.3334227456,
 0.3414916992, 0.9303334324, -0.1057434082, -0.2336423959, -0.1584625244,
 -0.0613163105, 0.0755310059, 0.0507583633, -0.0085067749, 0.0052639076, 0,
 0, 0.0080684762, -0.0004882812, -0.0156739700, 0.0351562500,
 -0.1224220700, -0.1416015625, 0.1116962184, 0, 0.2605831238,
 0.2753906250, 0.9535733590, -0.1054687500, -0.1940573913, -0.1240234375,
 -0.0548302603, 0.0703125000, 0.0478278612, -0.0092773438, 0.0052346529, 0,
 0, 0, 0, 0, 0, 0, 0, 0.0625, 0, -0.5625, 0.5, -0.5625, 0, 0.0625, 0, 0, 0, 0, 0, 0, 0,
-0.0000068244, 0, 0.0006416022, 0, -0.0013239061,
0, -0.0062697822, 0.0418701172, 0.0046437713, -0.6383056641,
0.4868763805, -0.4056396484, -0.0052778157, 0.0880126953, 0.0084686242,
0, 0.0019549156, 0, -0.0009474072, 0, 0.0000100772,
-0.0000105207, 0, 0.0009891052, 0, -0.0020409567,
0, -0.0102671340, 0.0263671875, 0.0083621973, -0.6416015625,
0.4505404473, -0.1865234375, -0.0105360636, 0.1142578125, 0.0178060210,
0, 0.0042044179, 0, -0.0020375795, 0, 0.0000216728,
-0.0000116779, 0, 0.0010979010, 0, -0.0022654502,
0, -0.0122325875, 0.0152587891, 0.0109545547, -0.5877685547,
0.3955445888, 0.0692138672, -0.0150305541, 0.1361083984, 0.0263680005,
0, 0.0063219400, 0, -0.0030637904, 0, 0.0000325882,
-0.0000108853, 0, 0.0010233820, 0, -0.0021116847,
0, -0.0124066747, 0.0078125000, 0.0122201203, -0.4921875000,
0.3264411929, 0.3359375000, -0.0180170972, 0.1484375000, 0.0325103732,
0, 0.0078809147, 0, -0.0038193135, 0, 0.0000406244,
0, 0, 0, 0.0351562500, -0.0078125000,
-0.0703125000, 0.1406250000, -0.3828125000, -0.4921875000, 0.1484375000,
0.7187500000, 0.2812500000, -0.4921875000, -0.0859375000, 0.1406250000,
0.0703125000, -0.0078125000, 0.0078125000, 0, -0.0039062500, 0,
 0, 0.0001018766, 0, 0.0303161357, -0.0052337646,
 -0.0600246690, 0.1268920898, -0.3265060371, -0.4662322998, 0.1286158103,
 0.7006835938, 0.4161860588, -0.4950714111, -0.0775993326, 0.1499633789,
 0.0710570122, -0.0110015869, 0.0089063147, 0, -0.0044853655, 0,
 0, 0.0001570548, 0, 0.0253345347, -0.0032958984,
 -0.0497323788, 0.1098632813, -0.2705710241, -0.4207763672, 0.1086969241,
 0.6503906250, 0.5464478186, -0.4757080078, -0.0688975450, 0.1538085937,
 0.0709986049, -0.0142822266, 0.0097759450, 0, -0.0049572422, 0,
 0, 0.0001743299, 0, 0.0203458451, -0.0019073486,
 -0.0396519690, 0.0906372070, -0.2160295789, -0.3604888916, 0.0889104400,
 0.5737304688, 0.6679306704, -0.4360198975, -0.0596705159, 0.1510620117,
 0.0691767985, -0.0170135498, 0.0102377149, 0, -0.0052230143, 0,
 0, 0.0001624974, 0, 0.0154844648, -0.0009765625,
 -0.0299997787, 0.0703125000, -0.1639038196, -0.2900390625, 0.0694859566,
 0.4765625000, 0.7765300054, -0.3779296875, -0.0497566239, 0.1406250000,
 0.0646311136, -0.0185546875, 0.0101079486, 0, -0.0051838159, 0,
 0, 0, 0, 0, 0.03125, 0, -0.0625, 0.0625, -0.28125, -0.5625, 0.125,
 -0.5625, -0.28125, 0.0625, -0.0625, 0, 0.03125, 0, 0, 0, 0,
 0.0000460650, 0, -0.0000950522, 0, 0.0298714246,
 0, -0.0603097502, 0.0418701172, -0.2620575547, -0.6383056641,
 0.1210484612, -0.4056396484, -0.2873719989, 0.0880126953, -0.0607842334,
 0, 0.0308106673, 0, 0.0001403566, 0, -0.0000680208,
 0.0000710146, 0, -0.0001465341, 0, 0.0269600515,
 0, -0.0547940473, 0.0263671875, -0.2322233653, -0.6416015625,
 0.1103357956, -0.1865234375, -0.2804413542, 0.1142578125, -0.0556978249,
 0, 0.0287490851, 0, 0.0003018636, 0, -0.0001462916,
 0.0000788257, 0, -0.0001626520, 0, 0.0229211831,
 0, -0.0468124393, 0.0152587891, -0.1947877603, -0.5877685547,
 0.0945749292, 0.0692138672, -0.2610874950, 0.1361083984, -0.0480551335,
 0, 0.0253811043, 0, 0.0004538949, 0, -0.0002199703,
 0.0000734755, 0, -0.0001516121, 0, 0.0181601219,
 0, -0.0372244741, 0.0078125000, -0.1527910682, -0.4921875000,
 0.0754787882, 0.3359375000, -0.2299398505, 0.1484375000, -0.0386705183,
 0, 0.0210225757, 0, 0.0005658242, 0, -0.0002742144};
int packetker_extent = 10;
int lutprec = 8;
// clears existing orientation data and sets dimensions
// to match the image. call this whenever a new image has
// been loaded, and prior to calling init_orient
void orientationfield::clearfield(int seth, int setw)
{
  h = seth;
  w = setw;
  fieldtype = blockgrid;
  if (orientvec!=NULL)
  {
    delete[] orientvec;
    orientvec = NULL;
  }
  return;
}
int orientationfield::retrieve(int y, int x, direction dir)
{
  if (dir == both)
  {
    cerr << "Direction of the oriented transform can only "
      << "be vertical or horizontal" << endl;
    exit(1);
  }
  if (fieldtype == blockgrid)
    return block_retrieve(y,x,dir);
  else if (fieldtype == affinegrid)
    return affine_retrieve(y,x,dir);
  else // impossible error
  {
    cerr << "Orientation field type cannot be accessed" << endl;
    exit(1);
  }
}
int orientationfield::affine_retrieve(int y, int x, direction dir)
{
  const int o_w = (w-1)/blksz+1; // orientation field width
  const int o_h = (h-1)/blksz+1; // orientation field height
  int xnodeL = (x-blksz/2)/blksz; // location of nearest node to the left (lower node)
  int ynodeL = (y-blksz/2)/blksz;
  bool outofbounds = (xnodeL<0)||(xnodeL>(o_w-2));
  xnodeL = (xnodeL<0)?0:(xnodeL>(o_w-1))?o_w-1:xnodeL;
  int xnodeU = outofbounds?xnodeL:xnodeL+1;
  outofbounds = (ynodeL<0)||(ynodeL>(o_h-2));
  ynodeL = (ynodeL<0)?0:(ynodeL>o_h-1)?o_h-1:ynodeL;
  int ynodeU = outofbounds?ynodeL:ynodeL+1;
  double s1 = (x-xnodeL*blksz-0.5*blksz+0.5)/blksz; // normalised distance from the horizontal L node
  double s2 = (y-ynodeL*blksz-0.5*blksz+0.5)/blksz; // vertical normalised displacement
  int orientLL = (dir==vertical)?
    orientvec[ynodeL*o_w+xnodeL].hshift
    :orientvec[ynodeL*o_w+xnodeL].vshift;
  int orientLU = (dir==vertical)?
    orientvec[ynodeU*o_w+xnodeL].hshift
    :orientvec[ynodeU*o_w+xnodeL].vshift;
  int orientUL = (dir==vertical)?
    orientvec[ynodeL*o_w+xnodeU].hshift
    :orientvec[ynodeL*o_w+xnodeU].vshift;
  int orientUU = (dir==vertical)?
    orientvec[ynodeU*o_w+xnodeU].hshift
    :orientvec[ynodeU*o_w+xnodeU].vshift;
  if ((s1+s2) < 1) // top left triangle affine interpolation
    return (int) round(orientLL + s1*(orientUL-orientLL) + s2*(orientLU-orientLL));
  else // bottom right triangle affine interpolation
    return (int) round(orientUU + (1-s1)*(orientLU-orientUU) + (1-s2)*(orientUL-orientUU));
}
// call this function only after dwtnode::transpose
void orientationfield::transpose()
{
  if (orientvec != NULL)
  {
    orientation *odest = new orientation[numblks];
    for (int y=0;y<=(h-1)/blksz;y++)
      for (int x=0;x<=(w-1)/blksz;x++)
        odest[x*((h-1)/blksz+1)+y]=orientvec[y*((w-1)/blksz+1)+x];
    for (int n=0;n<numblks;n++)
      swap(odest[n].hshift,odest[n].vshift);
    delete[] orientvec;
    orientvec = odest;
  }
  swap(h,w);
  return;
}
// given the output destination pixel (n) and the desired shift
// (sigma) expressed in 1/oprec units, splits the shift into its
// integral (z) and fractional (LUT_index, shiftdirection) components.
//
// (LUT_index) selects the appropriate filter from the LUT for the desired
// shift. As the LUT only stores filters for positive shifts,
// (shiftdirection) indicates whether a negative fractional shift is
// actually desired. Usually, this is effected by reversing the filter
// coefficients, however in-band shifting requires more sophisticated
// selection of (LUT_index)
void dwtnode::kernel_selection(int n, int sigma, direction dir, int &z,
                      int &LUT_index, bool &shiftdirection)
{
	if (ofield.oprec > lutprec)
  {
    cerr << "Interpolation LUT has insufficient precision for"
      << " current orientation field." << endl;
    exit(1);
  }
  if ((lutprec%ofield.oprec)!=0)
  {
    cerr << "Interpolation LUT must have a precision that is "
      << "divisible into the orientation field's shift precision."
      << endl;
    exit(2);
  }
	const int N = (dwtlevel[!dir]==0)?splines_extent:
    (dwtlevel[!dir]==1)?inbandker_extent:packetker_extent;
	const int p = (dwtlevel[!dir]==0)?1: // periodicity
		(dwtlevel[!dir]==1)?2:4;
	const int veclen = 2*N+1;
	const int skip = lutprec/ofield.oprec;
  const int vecskip = skip*veclen; // elements to skip per sub-pixel shift increment
  const int phaseskip = (lutprec/2+1)*veclen; // elements per polyphase set of filters
  const int shiftskip = p * phaseskip; // elements per integer shift increment
  z = divround(sigma,ofield.oprec); // find integer component of shift
  // select kernels for the fractional-pixel shifts
  shiftdirection = (sigma >= z*ofield.oprec);
  LUT_index = abs(sigma - z*ofield.oprec)*vecskip + N;
  if (dwtlevel[!dir]!=0) // if LUT acts directly on subband coefficients
  { // modify kernel for subband type of the destination pixel
    LUT_index += (n%p)*phaseskip;
    // modify kernel for subband pattern of the support
    // if applying a reverse shift on packet subbands, and centre of support
    if ((p==4)&&(shiftdirection==false)&&(mod(n+z,2)==1)) // support centre is a H (odd) pixel
      LUT_index += mod(z+2,p)*shiftskip;
    else
      LUT_index += mod(z,p)*shiftskip;
  }
  return;
}
void dwtnode::apply_oriented_LHlift(double a, direction dir)
{ // error checking
  if (dir==both)
  {
    cerr << "L-H lift; only horizontal or vertical allowed" << endl;
    exit(1);
  }
  if (dwtlevel[!dir]>2)
  {
    cerr << "No inband shift kernel has been defined for "
      << dwtlevel[!dir] << " levels depth" << endl;
    exit(2);
  }
  const int s = 1<<dwtlevel[dir]; // stepsize
  double *lut = (dwtlevel[!dir]==0)?splines:
    (dwtlevel[!dir]==1)?inbandker_lut:packetker_lut;
  const int last = (dir==vertical)?((h-1)/s)*s : ((w-1)/s)*s;
  // centre of the kernel (each shift kernel has length 2N+1)
  const int N = (dwtlevel[!dir]==0)?splines_extent:
    (dwtlevel[!dir]==1)?inbandker_extent:packetker_extent;
  int sigma0, sigma1; // total shift in 1/oprec units
  int z0, z1, lut0, lut1, n;
  bool ksig0, ksig1;  // flag indicating positive or negative shift
  if (dir == vertical)
    for (int y=s;y<h;y+=2*s) // iterating over the destination (H) rows
      for (int x=0;x<w;x++)
      { // find relative shift between (y-s,y) and (y,y+s) rows
        for (sigma0=0, sigma1=0, n=0;n<s;n++)
        { // accumulate relative shifts of subsequent row pairs
          sigma0 += ofield.retrieve(y-1-n,x+divround(sigma0,ofield.oprec),vertical);
          sigma1 += ofield.retrieve(y+n,x+divround(-sigma1,ofield.oprec),vertical);
        }
        // break shifts down to integer shifts and LUT indices for filter selection
        kernel_selection(x,-sigma0,dir,z0,lut0,ksig0); // refer bk3p65
        kernel_selection(x,sigma1,dir,z1,lut1,ksig1);
        if (y==last) // bottom edge must be replicated
          pixels[y*w+x] += 2*a*
              filt(lut+lut0,(y-s)*w+x,-z0,N,horizontal,ksig0);
        else // NB: filter in the orthogonal direction to the transform
          pixels[y*w+x] += a*
            ( filt(lut+lut0,(y-s)*w+x,-z0,N,horizontal,ksig0)
            + filt(lut+lut1,(y+s)*w+x,-z1,N,horizontal,ksig1));
      }
  else // horizontal
    for (int y=0;y<h;y++)
      for (int x=s;x<w;x+=2*s) // iterating over the destination (H) cols
      { // find relative shift between (x-s,x) and (x,x+s) cols
        for (sigma0=0, sigma1=0, n=0;n<s;n++)
        { // accumulate relative shifts of subsequent column pairs
          sigma0 += ofield.retrieve(divround(y*ofield.oprec+sigma0,ofield.oprec),x-1-n,horizontal);
          sigma1 += ofield.retrieve(divround(y*ofield.oprec-sigma1,ofield.oprec),x+n,horizontal);
        }
        kernel_selection(y,-sigma0,dir,z0,lut0,ksig0);
        kernel_selection(y,sigma1,dir,z1,lut1,ksig1);
        if (x==last) // bottom edge must be replicated
          pixels[y*w+x] += 2*a*
              filt(lut+lut0,y*w+x-s,-z0,N,vertical,ksig0);
        else
          pixels[y*w+x] += a*
            ( filt(lut+lut0,y*w+x-s,-z0,N,vertical,ksig0)
            + filt(lut+lut1,y*w+x+s,-z1,N,vertical,ksig1));
      }
  return;
}
void dwtnode::apply_oriented_HLlift(double a, direction dir)
{
  if (dir==both)
  {
    cerr << "H-L lift; only horizontal or vertical allowed" << endl;
    exit(1);
  }
  if (dwtlevel[!dir]>2)
  {
    cerr << "No inband shift kernel has been defined for "
      << dwtlevel[!dir] << " levels depth" << endl;
    exit(2);
  }
  const int s = 1<<dwtlevel[dir]; // stepsize
  double *lut = (dwtlevel[!dir]==0)?splines:
    (dwtlevel[!dir]==1)?inbandker_lut:packetker_lut;
  const int last = (dir==vertical)?((h-1)/s)*s : ((w-1)/s)*s;
  const int N = (dwtlevel[!dir]==0)?splines_extent:
    (dwtlevel[!dir]==1)?inbandker_extent:packetker_extent;
  int sigma0, sigma1; // total shift in 1/oprec units
  int z0, z1, lut0, lut1, n;
  bool ksig0, ksig1;  // flag indicating positive or negative shift
  if (dir == vertical)
    for (int y=0;y<h;y+=2*s) // lifting to the L rows
      for (int x=0;x<w;x++)
      { // NB: When y==0, the retrieve function might not return a
        // meaningful value. However, in this case sigma0 is not used
        for (sigma0=0, sigma1=0, n=0;n<s;n++)
        { // accumulate relative shifts of subsequent row pairs
          sigma0 += ofield.retrieve(y-1-n,x+divround(sigma0,ofield.oprec),vertical);
          sigma1 += ofield.retrieve(y+n,x+divround(-sigma1,ofield.oprec),vertical);
        }
        kernel_selection(x,-sigma0,dir,z0,lut0,ksig0);
        kernel_selection(x,sigma1,dir,z1,lut1,ksig1);
        if (y==0) // top edge must be replicated
          pixels[y*w+x] += 2*a*
              filt(lut+lut1,(y+s)*w+x,-z1,N,horizontal,ksig1);
        else if (y==last) // replicate bottom edge
          pixels[y*w+x] += 2*a*
              filt(lut+lut0,(y-s)*w+x,-z0,N,horizontal,ksig0);
        else
          pixels[y*w+x] += a*
            ( filt(lut+lut0,(y-s)*w+x,-z0,N,horizontal,ksig0)
            + filt(lut+lut1,(y+s)*w+x,-z1,N,horizontal,ksig1));
      }
  else // horizontal
    for (int y=0;y<h;y++)
      for (int x=0;x<w;x+=2*s) // lifting to the L cols
      {
        for (sigma0=0, sigma1=0, n=0;n<s;n++)
        { // accumulate relative shifts of subsequent col pairs
          sigma0 += ofield.retrieve(divround(y*ofield.oprec+sigma0,ofield.oprec),x-1-n,horizontal);
          sigma1 += ofield.retrieve(divround(y*ofield.oprec-sigma1,ofield.oprec),x+n,horizontal);
        }
        kernel_selection(y,-sigma0,dir,z0,lut0,ksig0);
        kernel_selection(y,sigma1,dir,z1,lut1,ksig1);
        if (x==0) // replicate left edge
          pixels[y*w+x] += 2*a*
              filt(lut+lut1,y*w+x+s,-z1,N,vertical,ksig1);
        else if (x==last) // replicate right edge
          pixels[y*w+x] += 2*a*
              filt(lut+lut0,y*w+x-s,-z0,N,vertical,ksig0);
        else
          pixels[y*w+x] += a*
            ( filt(lut+lut0,y*w+x-s,-z0,N,vertical,ksig0)
            + filt(lut+lut1,y*w+x+s,-z1,N,vertical,ksig1));
      }
  return;
}
void dwtnode::oriented_analysis(direction dir)
{
  if (dir == both)
  {
    oriented_analysis(vertical);
    oriented_analysis(horizontal);
    return;
  }
  switch (dwtbase)
  {
  case w5x3:
    apply_oriented_LHlift(-0.5,dir);
    apply_oriented_HLlift(0.25,dir);
    apply_gain_factors(1,0.5,dir);
    break;
  case w9x7:
    apply_oriented_LHlift(-1.586134342,dir);
    apply_oriented_HLlift(-0.052980118,dir);
    apply_oriented_LHlift(0.882911075,dir);
    apply_oriented_HLlift(0.443506852,dir);
    apply_gain_factors(0.812893066,0.615087052,dir);
    break;
  default:
    cerr << "DWT kernel undefined!" << endl;
    exit(1);
    break;
  }
  dwtlevel[dir]++;
  return;
}
void dwtnode::oriented_synthesis(direction dir)
{
  if (dir == both)
  {
    oriented_synthesis(horizontal);
    oriented_synthesis(vertical);
    return;
  }
  dwtlevel[dir]--;
  switch (dwtbase)
  {
  case w5x3:
    apply_gain_factors(1,2,dir);
    apply_oriented_HLlift(-0.25,dir);
    apply_oriented_LHlift(0.5,dir);
    break;
  case w9x7:
    apply_gain_factors(1.230174105,1.625786132,dir);
    apply_oriented_HLlift(-0.443506852,dir);
    apply_oriented_LHlift(-0.882911075,dir);
    apply_oriented_HLlift(0.052980118,dir);
    apply_oriented_LHlift(1.586134342,dir);
    break;
  default:
    cerr << "DWT kernel undefined!" << endl;
    exit(1);
    break;
  }
  return;
}
void dwtnode::oriented_packet_analysis(direction dir)
{
  if (dir == both)
  {
    oriented_analysis(vertical);
    oriented_analysis(vertical);
    oriented_analysis(horizontal);
    oriented_analysis(horizontal);
  }
  else
  {
    oriented_analysis(dir);
    oriented_analysis(dir);
  }
  return;
}
void dwtnode::oriented_packet_synthesis(direction dir)
{
  if (dir == both)
  {
    oriented_synthesis(horizontal);
    oriented_synthesis(horizontal);
    oriented_synthesis(vertical);
    oriented_synthesis(vertical);
  }
  else
  {
    oriented_synthesis(dir);
    oriented_synthesis(dir);
  }
  return;
}